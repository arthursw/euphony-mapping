// Generated by CoffeeScript 1.6.3
(function() {
  var PianoKey2D, PianoKeyboard2D;

  PianoKey2D = (function() {
    function PianoKey2D(design, note, offsetX, scale, whiteGroup, blackGroup) {
      var Black, KeyType, blackKeyColor, blackKeyHeight, blackKeyLength, blackKeyPosY, blackKeyPosZ, blackKeyWidth, keyCenterPosX, keyDip, keyInfo, keyType, keyUpSpeed, whiteKeyColor, whiteKeyHeight, whiteKeyLength, whiteKeyWidth, _ref;
      blackKeyWidth = design.blackKeyWidth, blackKeyHeight = design.blackKeyHeight, blackKeyLength = design.blackKeyLength, blackKeyColor = design.blackKeyColor, whiteKeyWidth = design.whiteKeyWidth, whiteKeyHeight = design.whiteKeyHeight, whiteKeyLength = design.whiteKeyLength, whiteKeyColor = design.whiteKeyColor, blackKeyPosY = design.blackKeyPosY, blackKeyPosZ = design.blackKeyPosZ, keyDip = design.keyDip, keyInfo = design.keyInfo, keyUpSpeed = design.keyUpSpeed, KeyType = design.KeyType;
      Black = KeyType.Black;
      _ref = keyInfo[note], keyType = _ref.keyType, keyCenterPosX = _ref.keyCenterPosX;
      if (keyType === Black) {
        this.rectangle = new paper.Rectangle(keyCenterPosX - blackKeyWidth / 2 + offsetX, 0, blackKeyWidth, blackKeyLength);
        this.color = 'black';
      } else {
        this.rectangle = new paper.Rectangle(keyCenterPosX - whiteKeyWidth / 2 + offsetX, 0, whiteKeyWidth, whiteKeyLength);
        this.color = 'white';
      }
      this.rectangle.x *= scale;
      this.rectangle.y *= scale;
      this.rectangle.width *= scale;
      this.rectangle.height *= scale;
      this.path = new paper.Path.Rectangle(this.rectangle);
      this.path.fillColor = this.color;
      this.path.strokeColor = 'black';
      if (keyType === Black) {
        blackGroup.addChild(this.path);
      } else {
        whiteGroup.addChild(this.path);
      }
    }

    PianoKey2D.prototype.press = function() {
      this.path.fillColor = 'red';
      return this.isPressed = true;
    };

    PianoKey2D.prototype.release = function() {
      this.path.fillColor = this.color;
      return this.isPressed = false;
    };

    return PianoKey2D;

  })();

  PianoKeyboard2D = (function() {
    function PianoKeyboard2D(design, noteToColor) {
      var blackGroup, canvas, canvasHeight, canvasWidth, key, layer, note, offsetX, scale, whiteGroup, _i, _ref,
        _this = this;
      this.keys = [];
      canvas = document.getElementById("keyboard-2D");
      canvasHeight = canvas.getAttribute("height");
      canvasWidth = $("body").width();
      canvas.setAttribute("width", canvasWidth);
      paper.setup('keyboard-2D');
      layer = paper.project.activeLayer;
      whiteGroup = new paper.Group();
      blackGroup = new paper.Group();
      scale = canvasHeight / design.whiteKeyLength;
      offsetX = (-13 * design.whiteKeyWidth) + (((canvasWidth / scale) - 52 * design.whiteKeyWidth) / 2);
      for (note = _i = 0, _ref = design.keyInfo.length; 0 <= _ref ? _i < _ref : _i > _ref; note = 0 <= _ref ? ++_i : --_i) {
        if ((20 < note && note < 109)) {
          key = new PianoKey2D(design, note, offsetX, scale, whiteGroup, blackGroup);
          this.keys.push(key);
        }
      }
      blackGroup.moveAbove(whiteGroup);
      paper.view.draw();
      paper.view.onFrame = function(event) {
        return 1;
      };
    }

    PianoKeyboard2D.prototype.press = function(note) {
      return this.keys[note - 21].press();
    };

    PianoKeyboard2D.prototype.release = function(note) {
      return this.keys[note - 21].release();
    };

    return PianoKeyboard2D;

  })();

  this.PianoKeyboard2D = PianoKeyboard2D;

}).call(this);
