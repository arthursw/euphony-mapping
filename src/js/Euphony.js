// Generated by CoffeeScript 1.10.0
(function() {
  var Euphony,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Euphony = (function() {
    function Euphony() {
      this.saveMidi = bind(this.saveMidi, this);
      this.setProgress = bind(this.setProgress, this);
      this.setCurrentTime = bind(this.setCurrentTime, this);
      this.getEndTime = bind(this.getEndTime, this);
      this.pause = bind(this.pause, this);
      this.stop = bind(this.stop, this);
      this.resume = bind(this.resume, this);
      this.start = bind(this.start, this);
      this.toggle = bind(this.toggle, this);
      this.keyDown = bind(this.keyDown, this);
      this.update = bind(this.update, this);
      this.measureDuration = 1000;
      this.timeDivision = 0.25;
      this.noteDuration = 0.25;
      this.design = new PianoKeyboardDesign();
      this.keyboard2D = new PianoKeyboard2D(this.design);
      this.rain = new NoteRain2D(this.design, this.keyboard2D, this);
      this.context = paper.view.element.getContext('2d');
      this.player = MIDI.Player;
      this.player.BPM = 50;
      this.player.addListener((function(_this) {
        return function(data) {
          var NOTE_OFF, NOTE_ON, message, note;
          NOTE_OFF = 128;
          NOTE_ON = 144;
          note = data.note, message = data.message;
          if (message === NOTE_ON) {
            return _this.keyboard2D.press(note);
          } else if (message === NOTE_OFF) {
            return _this.keyboard2D.release(note);
          }
        };
      })(this));
      this.player.setAnimation((function(_this) {
        return function(data) {
          var end, now;
          now = data.now, end = data.end;
          if (typeof _this.onprogress === "function") {
            _this.onprogress({
              current: now,
              total: end
            });
          }
          return _this.update(now);
        };
      })(this));
      this.charToNoteNumber = {
        'Q': 60,
        'S': 62,
        'D': 64,
        'F': 65,
        'G': 67,
        'H': 69,
        'J': 71
      };
      $(window).keydown(this.keyDown);
    }

    Euphony.prototype.update = function(now, forceUpdate) {
      var canvas;
      if (forceUpdate == null) {
        forceUpdate = false;
      }
      canvas = paper.view.element;
      this.context.clearRect(0, 0, canvas.width, canvas.height);
      if (this.player.playing || forceUpdate) {
        this.rain.update(now * 1000);
      }
      this.keyboard2D.update(now * 1000);
      paper.view.update(true);
      this.keyboard2D.quad.texture.needsUpdate = true;
    };

    Euphony.prototype.keyDown = function(event) {
      var step, wasPlaying;
      switch (event.which) {
        case 32:
          if (this.player.playing) {
            this.player.pause();
          } else {
            this.player.resume();
          }
          break;
        case 37:
        case 38:
        case 39:
        case 40:
          if (this.keyboard2D.quad.selectedSprite != null) {
            return;
          }
          wasPlaying = this.player.playing;
          if (wasPlaying) {
            this.player.pause();
          }
          switch (event.which) {
            case 37:
              this.player.currentTime -= this.timeDivision * this.measureDuration;
              break;
            case 38:
              this.player.currentTime += this.measureDuration;
              break;
            case 39:
              this.player.currentTime += this.timeDivision * this.measureDuration;
              break;
            case 40:
              this.player.currentTime -= this.measureDuration;
          }
          step = this.measureDuration * this.timeDivision;
          this.player.currentTime = Math.floor(this.player.currentTime / step) * step;
          if (wasPlaying) {
            this.player.resume();
          }
          this.update(this.player.currentTime / 1000, true);
      }
      console.log('current time: ' + this.player.currentTime);
      if (event.which >= 65 && event.which <= 90) {
        console.log('which, char, note number');
        console.log(event.which);
        console.log(String.fromCharCode(event.which));
        console.log(this.charToNoteNumber[String.fromCharCode(event.which)]);
        this.toggle(this.charToNoteNumber[String.fromCharCode(event.which)]);
      }
    };

    Euphony.prototype.toggle = function(noteNumber) {
      var noteInfo, startTime, step;
      if (!noteNumber) {
        return;
      }
      step = this.measureDuration * this.timeDivision;
      startTime = Math.floor(this.player.currentTime / step) * step;
      noteInfo = {
        noteNumber: noteNumber,
        startTime: startTime,
        duration: this.noteDuration * this.measureDuration,
        velocity: 64
      };
      this.rain.toggleNote(noteInfo);
      this.player.toggleNote(noteInfo, this.measureDuration);
    };

    Euphony.prototype.initScene = function() {
      var canvas3D;
      this.scene = new SimpleScene('#canvas');
      canvas3D = $('#canvas').find('canvas');
      this.keyboard2D.initialize(this.scene);
      return this.scene.animate((function(_this) {
        return function() {
          return _this.keyboard2D.quad.computeTextureProjection();
        };
      })(this));
    };

    Euphony.prototype.initMidi = function(callback) {
      var onPluginLoaded;
      onPluginLoaded = function() {
        MIDI.channels[9].mute = true;
        if (typeof callback === "function") {
          callback();
        }
      };
      return MIDI.loadPlugin({
        onsuccess: onPluginLoaded,
        instruments: ['./midi-js-soundfonts/FluidR3_GM/acoustic_grand_piano']
      });
    };

    Euphony.prototype.loadBuiltinPlaylist = function(callback) {
      if (this.playlist) {
        return callback(this.playlist);
      }
      return $.getJSON('tracks/index.json', (function(_this) {
        return function(playlist) {
          _this.playlist = playlist;
          return callback(_this.playlist);
        };
      })(this));
    };

    Euphony.prototype.loadBuiltinMidi = function(id, callback) {
      if (!((0 <= id && id < this.playlist.length))) {
        return;
      }
      if (typeof localStorage !== "undefined" && localStorage !== null ? localStorage[id] : void 0) {
        return this.loadMidiFile(localStorage[id], callback);
      }
      return $.ajax({
        url: "tracks/" + this.playlist[id],
        dataType: 'text',
        success: (function(_this) {
          return function(data) {
            var e, error;
            _this.loadMidiFile(data, callback);
            try {
              return typeof localStorage !== "undefined" && localStorage !== null ? localStorage[id] = data : void 0;
            } catch (error) {
              e = error;
              return typeof console !== "undefined" && console !== null ? console.error('localStorage quota limit reached') : void 0;
            }
          };
        })(this)
      });
    };

    Euphony.prototype.loadMidiFile = function(midiFile, callback) {
      return this.player.loadFile(midiFile, (function(_this) {
        return function() {
          _this.rain.setMidiData(_this.player.data, callback);
          return _this.keyboard2D.noteInfos = _this.rain.noteInfos;
        };
      })(this));
    };

    Euphony.prototype.start = function() {
      this.keyboard2D.reset();
      this.player.start();
      return this.playing = true;
    };

    Euphony.prototype.resume = function() {
      this.player.currentTime += 1e-6;
      this.player.resume();
      return this.playing = true;
    };

    Euphony.prototype.stop = function() {
      this.player.stop();
      return this.playing = false;
    };

    Euphony.prototype.pause = function() {
      this.player.pause();
      return this.playing = false;
    };

    Euphony.prototype.getEndTime = function() {
      return this.player.endTime;
    };

    Euphony.prototype.setCurrentTime = function(currentTime) {
      this.player.pause();
      this.player.currentTime = currentTime;
      if (this.playing) {
        return this.player.resume();
      }
    };

    Euphony.prototype.setProgress = function(progress) {
      var currentTime;
      currentTime = this.player.endTime * progress;
      return this.setCurrentTime(currentTime);
    };

    Euphony.prototype.on = function(eventName, callback) {
      return this["on" + eventName] = callback;
    };

    Euphony.prototype.saveMidi = function() {
      var blob, byteArray, bytes, currentTime, event, file, i, j, k, l, len, len1, len2, m, midiData, noteInfo, noteOff, noteOn, previousTime, ref, ref1, track;
      file = new JSMidgen.File();
      track = new JSMidgen.Track();
      currentTime = 0;
      midiData = [];
      ref = this.rain.noteInfos;
      for (j = 0, len = ref.length; j < len; j++) {
        noteInfo = ref[j];
        noteOn = {
          noteNumber: noteInfo.noteNumber,
          startTime: noteInfo.startTime,
          velocity: noteInfo.velocity,
          type: 'noteOn'
        };
        midiData.push(noteOn);
        noteOff = {
          noteNumber: noteInfo.noteNumber,
          startTime: noteInfo.startTime + noteInfo.duration,
          velocity: noteInfo.velocity,
          type: 'noteOff'
        };
        midiData.push(noteOff);
      }
      midiData.sort(function(a, b) {
        return a.startTime - b.startTime;
      });
      previousTime = 0;
      for (k = 0, len1 = midiData.length; k < len1; k++) {
        event = midiData[k];
        event.interval = event.startTime - previousTime;
        previousTime = event.startTime;
      }
      for (l = 0, len2 = midiData.length; l < len2; l++) {
        event = midiData[l];
        if (event.type === 'noteOn') {
          track.addNoteOn(0, MIDI.noteToKey[event.noteNumber], event.interval, event.velocity);
        } else if (event.type === 'noteOff') {
          track.addNoteOff(0, MIDI.noteToKey[event.noteNumber], event.interval, event.velocity);
        }
      }
      file.addTrack(track);
      bytes = file.toBytes();
      byteArray = new Uint8Array(bytes.length);
      for (i = m = 0, ref1 = bytes.length - 1; 0 <= ref1 ? m <= ref1 : m >= ref1; i = 0 <= ref1 ? ++m : --m) {
        byteArray[i] = bytes.charCodeAt(i);
      }
      blob = new Blob([byteArray], {
        type: 'application/octet-stream'
      });
      saveAs(blob, "track.midi");
    };

    return Euphony;

  })();

  this.Euphony = Euphony;

}).call(this);
