// Generated by CoffeeScript 1.10.0
(function() {
  var PianoKey2D, PianoKeyboard2D,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PianoKey2D = (function() {
    function PianoKey2D(design, note1, whiteGroup, blackGroup) {
      var Black, KeyType, blackKeyColor, blackKeyHeight, blackKeyLength, blackKeyPosY, blackKeyPosZ, blackKeyWidth, keyCenterPosX, keyDip, keyInfo, keyType, keyUpSpeed, ref, whiteKeyColor, whiteKeyHeight, whiteKeyLength, whiteKeyWidth;
      this.note = note1;
      this.whiteGroup = whiteGroup;
      this.blackGroup = blackGroup;
      this.update = bind(this.update, this);
      this.highlight = bind(this.highlight, this);
      blackKeyWidth = design.blackKeyWidth, blackKeyHeight = design.blackKeyHeight, blackKeyLength = design.blackKeyLength, blackKeyColor = design.blackKeyColor, whiteKeyWidth = design.whiteKeyWidth, whiteKeyHeight = design.whiteKeyHeight, whiteKeyLength = design.whiteKeyLength, whiteKeyColor = design.whiteKeyColor, blackKeyPosY = design.blackKeyPosY, blackKeyPosZ = design.blackKeyPosZ, keyDip = design.keyDip, keyInfo = design.keyInfo, keyUpSpeed = design.keyUpSpeed, KeyType = design.KeyType;
      Black = KeyType.Black;
      ref = keyInfo[this.note], keyType = ref.keyType, keyCenterPosX = ref.keyCenterPosX;
      if (keyType === Black) {
        this.rectangle = new paper.Rectangle(keyCenterPosX - blackKeyWidth / 2, 0, blackKeyWidth, blackKeyLength);
        this.color = 'black';
      } else {
        this.rectangle = new paper.Rectangle(keyCenterPosX - whiteKeyWidth / 2, 0, whiteKeyWidth, whiteKeyLength);
        this.color = 'white';
      }
    }

    PianoKey2D.prototype.highlight = function(velocity) {
      if (velocity <= 1) {
        this.path.fillColor = 'darkblue';
      } else if (velocity > 1) {
        this.path.fillColor = 'yellowgreen';
      }
      this.isPressed = true;
    };

    PianoKey2D.prototype.press = function() {
      this.path.fillColor = 'red';
      return this.isPressed = true;
    };

    PianoKey2D.prototype.release = function() {
      this.path.fillColor = this.color;
      return this.isPressed = false;
    };

    PianoKey2D.prototype.update = function(offsetX, scale) {
      var ref;
      if ((ref = this.path) != null) {
        ref.remove();
      }
      this.path = new paper.Path.Rectangle((this.rectangle.x + offsetX) * scale, this.rectangle.y * scale, this.rectangle.width * scale, this.rectangle.height * scale);
      this.path.fillColor = this.color;
      this.path.strokeColor = 'black';
      if (this.color === 'black') {
        return this.blackGroup.addChild(this.path);
      } else {
        return this.whiteGroup.addChild(this.path);
      }
    };

    return PianoKey2D;

  })();

  PianoKeyboard2D = (function() {
    function PianoKeyboard2D(design) {
      this.reset = bind(this.reset, this);
      this.onresize = bind(this.onresize, this);
      var firstNotePosX, i, key, lastNotePosX, note, ref;
      this.begin = 21;
      this.end = 109;
      this.nWhiteKeys = 0;
      this.nWhiteKeysBefore = 0;
      this.keys = [];
      this.design = design;
      this.canvasKeyboard = $('#keyboard-2D');
      this.timeOffset = 1000;
      paper.setup(this.canvasKeyboard[0]);
      this.group = new paper.Group();
      this.whiteGroup = new paper.Group();
      this.blackGroup = new paper.Group();
      this.group.addChild(this.whiteGroup);
      this.group.addChild(this.blackGroup);
      for (note = i = 0, ref = design.keyInfo.length; 0 <= ref ? i < ref : i > ref; note = 0 <= ref ? ++i : --i) {
        if ((this.begin <= note && note < this.end)) {
          key = new PianoKey2D(design, note, this.whiteGroup, this.blackGroup);
          if (key.color === 'white') {
            this.nWhiteKeys++;
          }
          this.keys.push(key);
        }
        if (note < this.begin) {
          if (design.keyInfo[note].keyType !== design.KeyType.Black) {
            this.nWhiteKeysBefore++;
          }
        }
      }
      firstNotePosX = design.keyInfo[this.begin].keyCenterPosX;
      lastNotePosX = design.keyInfo[this.end - 1].keyCenterPosX;
      this.keyboardWidth = this.design.whiteKeyWidth + lastNotePosX - firstNotePosX;
      this.onresize();
      $(window).resize(this.onresize);
    }

    PianoKeyboard2D.prototype.initialize = function(scene) {
      this.canvasWidth = $("body").width();
      this.canvasHeight = $("body").height();
      this.quad = new Quad(this.canvasWidth, this.canvasHeight, this.canvasKeyboard, scene);
      this.quad.resize();
    };

    PianoKeyboard2D.prototype.onresize = function() {
      var i, key, keyboardHeight, len, ref, ref1;
      this.canvasWidth = $("body").width();
      this.canvasHeight = $("body").height();
      keyboardHeight = this.design.whiteKeyHeight;
      this.keyUnitToPixelsRatio = this.canvasWidth / this.keyboardWidth;
      this.keyboardHeightInPixel = this.design.whiteKeyLength * this.keyUnitToPixelsRatio;
      this.offsetX = -this.nWhiteKeysBefore * this.design.whiteKeyWidth;
      this.canvasKeyboard.attr("width", this.canvasWidth);
      this.canvasKeyboard.attr("height", this.canvasHeight);
      ref = this.keys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        key.update(this.offsetX, this.keyUnitToPixelsRatio);
      }
      this.blackGroup.moveAbove(this.whiteGroup);
      this.group.position.y = this.canvasHeight - this.keyboardHeightInPixel * 0.5;
      return (ref1 = this.quad) != null ? ref1.resize() : void 0;
    };

    PianoKeyboard2D.prototype.update = function(playerCurrentTime) {
      var duration, i, j, k, key, len, len1, n, noteInfo, noteNumber, ref, ref1, results, startTime, velocity;
      ref = this.keys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        key.release();
      }
      if (this.noteInfos == null) {
        return;
      }
      ref1 = this.noteInfos;
      results = [];
      for (j = k = 0, len1 = ref1.length; k < len1; j = ++k) {
        noteInfo = ref1[j];
        noteNumber = noteInfo.noteNumber, startTime = noteInfo.startTime, duration = noteInfo.duration, velocity = noteInfo.velocity;
        if (playerCurrentTime > startTime && playerCurrentTime < startTime + duration) {
          n = noteNumber - this.begin;
          if ((0 < n && n < this.keys.length)) {
            results.push(this.keys[n].highlight(velocity));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PianoKeyboard2D.prototype.press = function(note) {};

    PianoKeyboard2D.prototype.release = function(note) {};

    PianoKeyboard2D.prototype.reset = function() {
      var i, key, len, ref, results;
      ref = this.keys;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        results.push(key.release());
      }
      return results;
    };

    return PianoKeyboard2D;

  })();

  this.PianoKeyboard2D = PianoKeyboard2D;

}).call(this);
