// Generated by CoffeeScript 1.10.0
(function() {
  var SimpleScene,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SimpleScene = (function() {
    function SimpleScene(container) {
      this.animate = bind(this.animate, this);
      this.onresize = bind(this.onresize, this);
      var $container, height, renderer, width;
      $container = $(container);
      width = $container.width();
      height = $container.height();
      this.width = width;
      this.height = height;
      this.cameraOrtho = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, 1, 10);
      this.cameraOrtho.position.z = 10;
      this.sceneOrtho = new THREE.Scene();
      renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      renderer.setSize(width, height);
      renderer.setClearColor(0x000000, 1);
      renderer.autoClear = false;
      $container.append(renderer.domElement);
      $(window).resize(this.onresize);
      this.$container = $container;
      this.renderer = renderer;
    }

    SimpleScene.prototype.onresize = function() {
      var height, ref, width;
      ref = [this.$container.width(), this.$container.height()], width = ref[0], height = ref[1];
      console.log("SimpleScene on resize: " + width + ", " + height);
      this.width = width;
      this.height = height;
      this.cameraOrtho.left = -width / 2;
      this.cameraOrtho.right = width / 2;
      this.cameraOrtho.top = height / 2;
      this.cameraOrtho.bottom = -height / 2;
      this.cameraOrtho.updateProjectionMatrix();
      return this.renderer.setSize(width, height);
    };

    SimpleScene.prototype.add = function(object) {
      return this.sceneOrtho.add(object);
    };

    SimpleScene.prototype.remove = function(object) {
      return this.sceneOrtho.remove(object);
    };

    SimpleScene.prototype.animate = function(callback) {
      requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate(callback);
        };
      })(this));
      if (typeof callback === "function") {
        callback();
      }
      this.renderer.clear();
      this.renderer.clearDepth();
      return this.renderer.render(this.sceneOrtho, this.cameraOrtho);
    };

    return SimpleScene;

  })();

  this.SimpleScene = SimpleScene;

}).call(this);
