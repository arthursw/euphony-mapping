// Generated by CoffeeScript 1.10.0
(function() {
  var Scene,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scene = (function() {
    function Scene(container) {
      this.animate = bind(this.animate, this);
      this.onresize = bind(this.onresize, this);
      var $container, ambientLight, auxLight, camera, controls, height, mainLight, renderer, scene, width;
      $container = $(container);
      width = $container.width();
      height = $container.height();
      console.log("Scene width" + width);
      scene = new THREE.Scene();
      camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);
      scene.add(camera);
      renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      renderer.setSize(width, height);
      renderer.setClearColor(0x000000, 1);
      renderer.autoClear = false;
      $container.append(renderer.domElement);
      ambientLight = new THREE.AmbientLight(0x222222);
      scene.add(ambientLight);
      mainLight = new THREE.DirectionalLight(0xffffff, 0.8);
      mainLight.position.set(1, 2, 4).normalize();
      scene.add(mainLight);
      auxLight = new THREE.DirectionalLight(0xffffff, 0.3);
      auxLight.position.set(-4, -1, -2).normalize();
      scene.add(auxLight);
      controls = new THREE.OrbitControls(camera);
      controls.center.set(8.73, 0, 0);
      controls.autoRotateSpeed = 1.0;
      controls.autoRotate = false;
      camera.position.copy(controls.center).addSelf(new THREE.Vector3(2, 6, 9));
      $(window).resize(this.onresize);
      this.$container = $container;
      this.camera = camera;
      this.scene = scene;
      this.renderer = renderer;
      this.controls = controls;
    }

    Scene.prototype.onresize = function() {
      var height, ref, width;
      ref = [this.$container.width(), this.$container.height()], width = ref[0], height = ref[1];
      this.camera.aspect = width / height;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(width, height);
    };

    Scene.prototype.add = function(object) {
      return this.scene.add(object);
    };

    Scene.prototype.remove = function(object) {
      return this.scene.remove(object);
    };

    Scene.prototype.animate = function(callback) {
      requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate(callback);
        };
      })(this));
      if (typeof callback === "function") {
        callback();
      }
      this.controls.update();
      this.renderer.clear();
      return this.renderer.render(this.scene, this.camera);
    };

    return Scene;

  })();

  this.Scene = Scene;

}).call(this);
